name: 'Deploy to GKE'

on: workflow_dispatch

concurrency:
  group: ${{ github.workflow }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
        
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ./terraform
      
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ./terraform
      env:
         GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      working-directory: ./terraform
      env:
         GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
    # Install helm
    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    # Deploy to the GKE cluster
    - name: Deploy
      run: |
        gcloud container clusters get-credentials lime-368809-gke-1 \
          --zone us-central1 \
          --project lime-368809
        helm upgrade --install mirror-1 ./hedera-local-node/ 
        kubectl get services -o wide
      working-directory: ./chart


    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
        cache: npm

    
    - name: Install dependencies
      run: |
         npm ci
    
    - name: Prepare the tests
      run: |
         npm ci 
      working-directory: ./test/smoke       
    - name: Run the tests
      run: |
         npx hardhat test --grep Smoke > output.log
      working-directory: ./test/smoke      
      
    - name: Print test results
      if: always()
      run: |
         cat output.log
      working-directory: ./test/smoke
      
    - name: Send mail
      uses: dawidd6/action-send-mail@v3
      if: always()
      with:
        server_address: smtp.zoho.com
        # Server port, default 25:
        server_port: 587
        # Optional whether this connection use TLS (default is true if server_port is 465)
        # secure: true
        # Optional (recommended): mail server username:
        username: ${{secrets.MAIL_USERNAME}}
        # Optional (recommended) mail server password:
        password: ${{secrets.MAIL_PASSWORD}}
        # Required mail subject:
        subject: Github Actions job result
        # Required recipients' addresses:
        to: iliasavov@gmail.com
        # Required sender full name (address can be skipped):
        from: Luke Skywalker # <user@example.com>
        # Optional plain body:
        body: Build job of ${{github.repository}}
        # Optional HTML body read from file:
        #html_body: file://README.html
        # Optional unsigned/invalid certificates allowance:
        ignore_cert: true
        # Optional converting Markdown to HTML (set content_type to text/html too):
        convert_markdown: true
        # Optional attachments:
        attachments: ./test/smoke/output.log
        # Optional priority: 'high', 'normal' (default) or 'low'

      
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Destroy
      if: always()
      run: terraform destroy -auto-approve
      working-directory: ./terraform
